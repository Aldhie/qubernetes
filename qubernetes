#!/usr/bin/env ruby

require "yaml"
require "erb"
require 'colorize'

# generic variables
@config                = YAML.load_file("qubernetes.yaml")
@nodes                 = @config["nodes"]
@Raft_Port             = @config["quorum"]["quorum"]["Raft_Port"]
@Node_WSPort           = @config["geth"]["Node_WSPort"]
@NodeP2P_ListenAddr    = @config["geth"]["NodeP2P_ListenAddr"]

#####################
# Create config files for each node
#####################

def set_node_template_vars(values)
  @Node_UserIdent        = values["Node_UserIdent"]
  return
end

# create the output directory if it doesn't exist
`mkdir -p out`

sed_string = ""

# make all services
# set the replacement string sed cmmand which is run on the permissioned-nodes.json,
# as the service host IPs of the nodes are not known until they are deployed, and need
# to be properly set in the permissioned-nodes.json.
#PERM_NODE_JSON=$(echo $PERM_NODE_TMPL | sed \"s/%QUORUM_DEPLOYMENT_01_SERVICE_HOST%/$QUORUM_NODE01_SERVICE_HOST/g\" | sed \"s/\\$QUORUM_DEPLOYMENT_02_SERVICE_HOST/$QUORUM_NODE02_SERVICE_HOST/g\");
@nodes.each do |node|
  set_node_template_vars(node.values.first)
#  puts ("#{@Node_UserIdent}")
  k8_service_host_var = ("#{@Node_UserIdent}".upcase + "_SERVICE_HOST").gsub("-", "_")
  permission_node_host="#{@Node_UserIdent}".upcase + "_SERVICE_HOST"
 # puts (k8_service_host_var)
  sed_instruction = ' sed \"s/%' + permission_node_host + '%/$' + k8_service_host_var + '/g\"'
  sed_string = sed_string + sed_instruction + " | "
end

@Sed_Set_Node_Service_Host = sed_string[0...-2]
#puts (sed_string)

File.open("out/quorum-shared-config.yaml", "w") do |f|
  f.puts (ERB.new(File.read("quorum-shared-config.yaml.erb"), nil, "-").result)
end

# Create the service resources
File.open("out/quorum-services.yaml", "w") do |f|
  f.puts (ERB.new(File.read("quorum-services.yaml.erb"), nil, "-").result)
end

# make all keystore resrouce (configMap, TODO: Secretes)
File.open("out/quorum-keyconfigs.yaml", "w") do |f|
  f.puts (ERB.new(File.read("quorum-keystore.yaml.erb"), nil, "-").result)
end

# make deployments
File.open("out/quorum-deployments.yaml", "w") do |f|
  f.puts (ERB.new(File.read("quorum-deployment.yaml.erb"), nil, "-").result)
end

puts("\n")
puts "  Success! ".green
puts("  Kubernetes resrouce files for kubernetes have been generated in the `out/` directory.")
puts("\n")
puts("  Deploy to kubernetes:")
puts("\n")
puts("  run `/deploy.sh` with your kubernetes cluster ")
puts("  set in the script.")
puts("  or run `kubectl apply -f {Resource.yam}` on the generated files")
puts("\n")
